AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  AWS SAM Template for Multi-Lambda Microservices

Parameters:
  ExistingBucketName:
    Type: String
    Description: Name of the existing S3 bucket that will trigger the Orchestrator Lambda
    Default: "etllambdatest"

Globals:
  Function:
    Timeout: 10
    MemorySize: 256

Resources:

  # Orchestrator Lambda (Triggered by S3 PutObject)
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/orchestrator/
      Handler: app.orch_lambda
      Runtime: python3.13
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:  # Allows this Lambda to read from S3
            BucketName: !Ref ExistingBucketName
        - Statement:  # Add this to allow invoking other Lambdas
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt SQLDocketIngestFunction.Arn
      # Events:
      #   S3PutEvent:
      #     Type: S3
      #     Properties:
      #       Bucket: !Ref ExistingBucketName
      #       Events: s3:ObjectCreated:*
  
  # Permission to allow S3 to invoke the Lambda
  OrchestratorFunctionS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OrchestratorFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${ExistingBucketName}"

  # Custom resource Lambda to set up S3 notifications
  S3NotificationSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.13
      InlineCode: |
        import boto3
        import cfnresponse
        import json
        import logging

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def handler(event, context):
            logger.info('Received event: %s', json.dumps(event))
            
            # Extract parameters from the event
            props = event['ResourceProperties']
            bucket_name = props['BucketName']
            lambda_arn = props['LambdaArn']
            
            response_data = {}
            physical_id = f"{bucket_name}-notification"
            
            try:
                if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                    logger.info(f"Configuring notification for bucket {bucket_name} to Lambda {lambda_arn}")
                    
                    # Create S3 client
                    s3 = boto3.client('s3')
                    
                    # Configure bucket notification
                    notification_config = {
                        'LambdaFunctionConfigurations': [
                            {
                                'LambdaFunctionArn': lambda_arn,
                                'Events': ['s3:ObjectCreated:*']
                            }
                        ]
                    }
                    
                    # Apply the notification configuration
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration=notification_config
                    )
                    
                    response_data['Message'] = f"Successfully configured notification for {bucket_name}"
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
                elif event['RequestType'] == 'Delete':
                    # Remove the notification configuration
                    logger.info(f"Removing notification for bucket {bucket_name}")
                    
                    s3 = boto3.client('s3')
                    s3.put_bucket_notification_configuration(
                        Bucket=bucket_name,
                        NotificationConfiguration={}
                    )
                    
                    response_data['Message'] = f"Successfully removed notification for {bucket_name}"
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
            except Exception as e:
                logger.error('Error: %s', str(e))
                cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)}, physical_id)
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutBucketNotification'
                - 's3:GetBucketNotification'
              Resource: !Sub "arn:aws:s3:::${ExistingBucketName}"

  # Custom resource to trigger the notification configuration
  S3NotificationConfig:
    Type: Custom::S3BucketNotification
    Properties:
      ServiceToken: !GetAtt S3NotificationSetupFunction.Arn
      BucketName: !Ref ExistingBucketName
      LambdaArn: !GetAtt OrchestratorFunction.Arn

  # SQL Docket Ingest Lambda (Triggered by Orchestrator)
  SQLDocketIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/sql_docket_ingest/
      Handler: app.handler
      Runtime: python3.13
      VpcConfig:
        SecurityGroupIds:
          - sg-03e2bf8d3930f3c42
        SubnetIds:
          - subnet-0548c79ad1faa1117
          - subnet-0e157bfea98242a74
      Layers:
        - arn:aws:lambda:us-east-1:936771282063:layer:psycopg-import:1
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonRDSDataFullAccess  # Allows writing to Aurora
        - Version: '2012-10-17'  # Add Secrets Manager permissions
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "arn:aws:secretsmanager:us-east-1:936771282063:secret:mirrulationsdb/postgres/master-uA4mKl"  
      Environment:
        Variables:
          # Remove or replace these with your DB_SECRET_NAME environment variable
          # AURORA_CLUSTER_ARN: "arn:aws:rds:us-east-1:123456789012:cluster:my-cluster"
          # AURORA_SECRET_ARN: "arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret"
          DB_SECRET_NAME: "mirrulationsdb/postgres/master-uA4mKl"  # Name of your secret in Secrets Manager

Outputs:

  OrchestratorFunctionArn:
    Description: "Orchestrator Lambda Function ARN"
    Value: !GetAtt OrchestratorFunction.Arn

  SQLDocketIngestFunctionArn:
      Description: "SQL Docket Ingest Lambda Function ARN"
      Value: !GetAtt SQLDocketIngestFunction.Arn