AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  AWS SAM Template for Multi-Lambda Microservices

Globals:
  Function:
    Timeout: 10
    MemorySize: 256

Resources:

  # Orchestrator Lambda (Triggered by S3 PutObject)
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/orchestrator/
      Handler: app.orch_lambda
      Runtime: python3.13
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:  # Allows this Lambda to read from S3
            BucketName: !Ref ExistingDataBucket
      Events:
        S3PutEvent:
          Type: S3
          Properties:
            Bucket: !Ref ExistingDataBucket
            Events: s3:ObjectCreated:*

  # # SQL Ingest Lambda (Triggered by Orchestrator)
  # SQLIngestFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambda_functions/sql_ingest/
  #     Handler: app.handler
  #     Runtime: python3.13
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - AmazonRDSDataFullAccess  # Allows writing to Aurora
  #     Environment:
  #       Variables:
  #         AURORA_CLUSTER_ARN: "arn:aws:rds:us-east-1:123456789012:cluster:my-cluster"
  #         AURORA_SECRET_ARN: "arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret"
  #     Events:
  #       OrchestratorTrigger:
  #         Type: EventBridgeRule
  #         Properties:
  #           Pattern:
  #             source:
  #               - "custom.orchestrator"

  # Use Existing S3 Bucket (Instead of Creating One)
  ExistingDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "your-existing-bucket-name" 

Outputs:

  OrchestratorFunctionArn:
    Description: "Orchestrator Lambda Function ARN"
    Value: !GetAtt OrchestratorFunction.Arn

  # SQLIngestFunctionArn:
  #   Description: "Data Ingestor Lambda Function ARN"
  #   Value: !GetAtt DataIngestorFunction.Arn