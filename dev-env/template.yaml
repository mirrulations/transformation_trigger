AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  AWS SAM Template for Multi-Lambda Microservices

Globals:
  Function:
    Timeout: 120
    MemorySize: 256

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID where Lambda functions are deployed"
    Default: "vpc-00f6bc3c21d7d91d5"
  PrivateRouteTableIds:
    Type: CommaDelimitedList
    Description: "Route table IDs for the private subnets"
    Default: "rtb-0c89919b1ec9ba6e1"

Resources:
  # VPC Endpoint for S3
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VpcId
      RouteTableIds: !Ref PrivateRouteTableIds
      VpcEndpointType: Gateway

  # VPC Endpoint for Secrets Manager
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - sg-03e2bf8d3930f3c42
      SubnetIds:
        - subnet-0548c79ad1faa1117
        - subnet-049c40a73343487e5
        - subnet-0157ddb92a2e1d6ad
        - subnet-06bae533696203b97
        - subnet-073247252e9c9fa78
        - subnet-0e157bfea98242a74
  
  # New S3 bucket that will trigger the Orchestrator Lambda
  OrchestratorBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "orchestrator-bucket-${AWS::AccountId}-${AWS::Region}"

  # A common layer for shared code across lambdas such as secrets manager info
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-layer
      Description: "Common code shared among multiple Lambda functions"
      ContentUri: common_layer
      CompatibleRuntimes:
        - python3.13

  # Orchestrator Lambda (Triggered by SNS notification of S3 PutObject)
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-OrchestratorFunction"
      CodeUri: lambda_functions/orchestrator/
      Handler: app.orch_lambda
      Runtime: python3.13
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:  # Allows this Lambda to read from S3
            BucketName: !Sub "orchestrator-bucket-${AWS::AccountId}-${AWS::Region}"
        - Statement:  # Add this to allow invoking other Lambdas
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt SQLDocketIngestFunction.Arn
              - !GetAtt SQLDocumentIngestFunction.Arn
              - !GetAtt OpenSearchCommentFunction.Arn
      Events:
        S3PutEvent:
          Type: S3
          Properties:
            Bucket: !Ref OrchestratorBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          SQL_DOCKET_INGEST_FUNCTION: !Ref SQLDocketIngestFunction
          SQL_DOCUMENT_INGEST_FUNCTION: !Ref SQLDocumentIngestFunction
          OPENSEARCH_INGEST_FUNCTION: !Ref OpenSearchCommentFunction
  
  OrchestratorLambdaSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrchestratorFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      # The external SNS topic ARN (from the external account)
      SourceArn: arn:aws:sns:us-east-1:533267155325:mirrulations-object_created

  # Uncomment this if you want to create an SNS subscription for the Orchestrator Lambda to Mirrulations SNS topic
  
  # OrchestratorSNSSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     TopicArn: arn:aws:sns:us-east-1:533267155325:mirrulations-object_created
  #     Protocol: lambda
  #     Endpoint: !GetAtt OrchestratorFunction.Arn

  # SQL Docket Ingest Lambda (Triggered by Orchestrator)
  SQLDocketIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/sql_docket_ingest/
      Handler: app.handler
      Runtime: python3.13
      VpcConfig:
        SecurityGroupIds:
          - sg-03e2bf8d3930f3c42
        SubnetIds:
          - subnet-0548c79ad1faa1117
          - subnet-049c40a73343487e5
          - subnet-0157ddb92a2e1d6ad
          - subnet-06bae533696203b97
          - subnet-073247252e9c9fa78
          - subnet-0e157bfea98242a74
      Layers:
        - arn:aws:lambda:us-east-1:936771282063:layer:psycopg-import:1
        - arn:aws:lambda:us-east-1:936771282063:layer:aoss-imports:2
        - !Ref CommonLayer
      # Role: arn:aws:iam::936771282063:role/334s25_lambda_execution_opensearch
      Policies:
        - AmazonS3ReadOnlyAccess  # Allows reading from S3
        - AWSLambdaBasicExecutionRole
        - AmazonRDSDataFullAccess  # Allows writing to Aurora
        - Version: '2012-10-17'  # Add Secrets Manager permissions
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "arn:aws:secretsmanager:us-east-1:936771282063:secret:mirrulationsdb/postgres/master-uA4mKl"  
      Environment:
        Variables:
          DB_SECRET_NAME: "mirrulationsdb/postgres/master"  # Name of your secret in Secrets Manager

  # SQL Docket Ingest Lambda (Triggered by Orchestrator)
  SQLDocumentIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/sql_document_ingest/
      Handler: app.handler
      Runtime: python3.13
      VpcConfig:
        SecurityGroupIds:
          - sg-03e2bf8d3930f3c42
        SubnetIds:
          - subnet-0548c79ad1faa1117
          - subnet-049c40a73343487e5
          - subnet-0157ddb92a2e1d6ad
          - subnet-06bae533696203b97
          - subnet-073247252e9c9fa78
          - subnet-0e157bfea98242a74
      Layers:
        - arn:aws:lambda:us-east-1:936771282063:layer:psycopg-import:1
        - arn:aws:lambda:us-east-1:936771282063:layer:aoss-imports:2
        - !Ref CommonLayer
      # Role: arn:aws:iam::936771282063:role/334s25_lambda_execution_opensearch
      Policies:
        - AmazonS3ReadOnlyAccess  # Allows reading from S3
        - AWSLambdaBasicExecutionRole
        - AmazonRDSDataFullAccess  # Allows writing to Aurora
        - Version: '2012-10-17'  # Add Secrets Manager permissions
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "arn:aws:secretsmanager:us-east-1:936771282063:secret:mirrulationsdb/postgres/master-uA4mKl"  
      Environment:
        Variables:
          DB_SECRET_NAME: "mirrulationsdb/postgres/master"  # Name of your secret in Secrets Manager

  OpenSearchCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/open_search/

      Handler: app.handler
      Runtime: python3.13
      VpcConfig:
        SecurityGroupIds:
          - sg-03e2bf8d3930f3c42
        SubnetIds:
          - subnet-0548c79ad1faa1117
          - subnet-049c40a73343487e5
          - subnet-0157ddb92a2e1d6ad
          - subnet-06bae533696203b97
          - subnet-073247252e9c9fa78
          - subnet-0e157bfea98242a74
      Layers:
        - arn:aws:lambda:us-east-1:936771282063:layer:psycopg-import:1
        - arn:aws:lambda:us-east-1:936771282063:layer:aoss-imports:2
        - !Ref CommonLayer
      Role: arn:aws:iam::936771282063:role/334s25_lambda_execution_opensearch
      Environment:
        Variables:
          DB_SECRET_NAME: "mirrulationsdb/opensearch/master"  # Name of the secret in Secrets Manager
  
  OpenSearchTextExtractFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/open_search/

      Handler: app.handler
      Runtime: python3.13
      VpcConfig:
        SecurityGroupIds:
          - sg-03e2bf8d3930f3c42
        SubnetIds:
          - subnet-0548c79ad1faa1117
          - subnet-049c40a73343487e5
          - subnet-0157ddb92a2e1d6ad
          - subnet-06bae533696203b97
          - subnet-073247252e9c9fa78
          - subnet-0e157bfea98242a74
      Layers:
        - arn:aws:lambda:us-east-1:936771282063:layer:psycopg-import:1
        - arn:aws:lambda:us-east-1:936771282063:layer:aoss-imports:2
        - !Ref CommonLayer
      Role: arn:aws:iam::936771282063:role/334s25_lambda_execution_opensearch
      Policies: 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "orchestrator-bucket-${AWS::AccountId}-${AWS::Region}"
      Environment:
        Variables:
          OUTPUT_BUCKET_NAME: !Ref OrchestratorBucket
          DB_SECRET_NAME: "mirrulationsdb/opensearch/master"  # Name of the secret in Secrets Manager
Outputs:

  OrchestratorFunctionArn:
    Description: "Orchestrator Lambda Function ARN"
    Value: !GetAtt OrchestratorFunction.Arn

  SQLDocumentIngestFunctionArn:
    Description: "SQL Document Ingest Lambda Function ARN"
    Value: !GetAtt SQLDocumentIngestFunction.Arn

  SQLDocketIngestFunctionArn:
    Description: "SQL Docket Ingest Lambda Function ARN"
    Value: !GetAtt SQLDocketIngestFunction.Arn

  OpenSearchCommentFunctionArn:
    Description: "OpenSearch Comment Ingest Lambda Function ARN"
    Value: !GetAtt OpenSearchCommentFunction.Arn

  OrchestratorBucketName:
    Description: "Name of the S3 Bucket created for triggering Orchestrator"
    Value: !Ref OrchestratorBucket
  
  OpenSearchTextExtractFunctionArn:
    Description: "OpenSearch Text Extract Ingest Lambda Function ARN"
    Value: !GetAtt OpenSearchTextExtractFunction.Arn

